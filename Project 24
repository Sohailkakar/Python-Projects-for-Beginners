# -------------------------------
# Mini Library Management System
# -------------------------------
# This project demonstrates Object-Oriented Programming (OOP) in Python
# using classes and objects to manage books in a library.
# Features: Add books, borrow books, return books, and view collection.


class Book:
    """A class representing a single book in the library."""

    def __init__(self, title, author):
        # Initialize book attributes
        self.title = title
        self.author = author
        self.is_borrowed = False  # Track whether the book is borrowed or not

    def borrow(self):
        """Mark the book as borrowed if it's available."""
        if not self.is_borrowed:
            self.is_borrowed = True
            return True
        return False  # If already borrowed, cannot borrow again

    def return_book(self):
        """Mark the book as returned if it was borrowed."""
        if self.is_borrowed:
            self.is_borrowed = False
            return True
        return False  # If it wasn’t borrowed, cannot return

    def __str__(self):
        """Return a user-friendly string representation of the book."""
        status = "Available" if not self.is_borrowed else "Borrowed"
        return f"{self.title} by {self.author} ({status})"


class Library:
    """A class representing the entire library."""

    def __init__(self):
        # Initialize an empty collection of books
        self.books = []

    def add_book(self, title, author):
        """Add a new book to the library."""
        new_book = Book(title, author)
        self.books.append(new_book)
        print(f"Book added: {title} by {author}")

    def show_books(self):
        """Display all books currently in the library."""
        if not self.books:
            print("No books in the library.")
        else:
            print("\nLibrary Collection:")
            for book in self.books:
                print(book)

    def borrow_book(self, title):
        """Borrow a book by title if it’s available."""
        for book in self.books:
            if book.title.lower() == title.lower() and not book.is_borrowed:
                book.borrow()
                print(f"You borrowed: {book.title}")
                return
        print("Sorry, this book is not available.")

    def return_book(self, title):
        """Return a borrowed book by title."""
        for book in self.books:
            if book.title.lower() == title.lower() and book.is_borrowed:
                book.return_book()
                print(f"You returned: {book.title}")
                return
        print("This book was not borrowed from our library.")


# -------------------------------
# Example Usage
# -------------------------------
if __name__ == "__main__":
    # Create a library instance
    library = Library()

    # Add books to the library
    library.add_book("1984", "George Orwell")
    library.add_book("To Kill a Mockingbird", "Harper Lee")
    library.add_book("The Great Gatsby", "F. Scott Fitzgerald")

    # Show all books in the library
    library.show_books()

    # Borrow a book
    library.borrow_book("1984")
    library.show_books()

    # Return the borrowed book
    library.return_book("1984")
    library.show_books()
